{"componentChunkName":"component---src-pages-contribute-jobdeploymentservice-setup-mdx","path":"/contribute/jobdeploymentservice_setup/","result":{"pageContext":{"frontmatter":{"title":"Job Deployment Service Setup","description":"Quick start guide for getting developers acclimated with the Job Deployment Service of the Accelerated Decision Making with AI Project"},"relativePagePath":"/contribute/jobdeploymentservice_setup.mdx","titleType":"page","MdxNode":{"id":"ca5bc854-cf17-5224-b0ab-2b90de7f276b","children":[],"parent":"a4f4c53b-3d3c-5b84-8db3-8a4353969256","internal":{"content":"---\ntitle: Job Deployment Service Setup\ndescription: Quick start guide for getting developers acclimated with the Job Deployment Service of the Accelerated Decision Making with AI Project\n---\n\n<PageDescription>\n\nThis service is intended to enable deployment of a job within a Kubernetes cluster. The service is deployed into the cluster where the jobs will be deployed, so it is assumed that the appropriate credentials are available.\n\nThe service itself has two endpoints, one to check if a particular job is currently running, and the other to deploy a new job given a specified json payload defining the image to be used, and the environment variables which should be injected at runtime.\n\nTo setup the job deployment service, follow the following steps:\n<AnchorLinks>\n  <AnchorLink>Prepare the Container Image </AnchorLink> \n  <AnchorLink>Deploy the Kubernetes Cluster</AnchorLink> \n  \n</AnchorLinks>\n</PageDescription>\n\n## Prepare the Container Image(assuming IBM Container Registry)\n\n1. **Build the Docker image **\n    ```bash\n    docker build . -t us.icr.io</namespace/jobname:tag>\n    ```\n\n2. **Push the Docker image **\n    ```bash\n    docker push us.icr.io</namespace/jobname:tag>\n    ```\n    Alternatively you can use the `push_image.sh` to handle all transactions involved while pushing an image to the IBM Container registry. \n\n    You can run the script by either:\n\n    i. **Providing all the environment variables inline, when running the script with the correct variables. ** e.g. in terminal run \n    ```bash\n    sh ./push_image.sh <TARGET_IBM_CLOUD_URL> <TARGET_IBM_CLOUD_REGION <TARGET_IBM_CLOUD_GROUP> <IBM_CLOUD_APIKEY> <DOCKER_SERVER> <CONTAINER_REGISTRY_NAMESPACE> <IMAGE_NAME> <IMAGE_TAG>\n    ```\n   \n    \n    ii. **Creating a .env file to hold all the required environment variables. **\n    ```env path=.env\n    # Shared variables\n    DOCKER_SERVER=______\n    CONTAINER_REGISTRY_NAMESPACE=______\n    IMAGE_NAME=______\n    IMAGE_TAG=______\n\n    # Push image variables\n    TARGET_IBM_CLOUD_URL=______\n    TARGET_IBM_CLOUD_REGION=______\n    TARGET_IBM_CLOUD_GROUP=______\n    IBM_CLOUD_APIKEY=______\n\n    # Configure yaml files variables\n    NAME=______\n    IMAGE_PULL_SECRET_NAME=______\n    JOB_NAMESPACE=______\n    ```\n\n    Copy the above and save it as .env in the JobDeploymentService directory and provide all the variables. Finally, run the script by simply running `sh ./push_image.sh`\n\nIf the  image already exists in the registry, opt to pull the image instead of pushing the Docker image.\nTo pull the Docker image, execute;\n```bash\ndocker pull [OPTIONS] NAME[:TAG|@DIGEST]\n```\n\n## Kubernetes Cluster Deployment\nStart by generating and configuring the yaml files, by running the script `sh ./config_yaml_files.sh` if you already created the `.env` file above. \n\nOtherwise, either create the `.env` file and supply the variables or supply the required environment variables inline when running the script.\n\n1. **Check for the clusters **\n    ```bash\n    kind get clusters\n    ```\n2. **If there are no clusters, create a new cluster with a name of your choice. ** i.e. admai\n    ```bash \n    kind create cluster --name admai\n    ```\n\n3. **To allow minikube to access and pull the image in the IBM container registry, create an image pull secret, update it in the ** `.env` **file and update it in the ** `name` **tag of the ** `k8s.py` **file **\n    ```sh\n    kubectl create secret docker-registry <YOUR_SECRET_NAME> --docker-server=<YOUR_DOCKER_SERVER e.g. us.icr.io> --docker-username=iamapikey --docker-password=<YOUR_ACCOUNT_APIKEY> --docker-email=<YOUR_DOCKER_EMAIL>\n  \n4. **Navigate to the `JobDeploymentService` directory **\n    ```bash\n    cd JobDeploymentService\n    \n5. **Allow the system user to access cluster resources by running; **\n    ```bash\n    kubectl create -f ocprbac.yaml\n    ```\n6. **Create a deployment by executing; **\n    ```bash\n    kubectl create -f ocpdeploy.yaml\n    ```\n7. **Create a service by executing; **\n    ```bash\n    kubectl create -f mkbservice.yaml\n    ```\n8. **Check whether the pod is started by running; **\n    ```bash\n    kubectl get pods \n    ```\n    If it is not started you can check more details using \n    ```bash\n    kubectl describe pod <pod_name>.\n    ```\n    \n    If the pod is started, run \n    ```bash\n    kubectl port-forward service/<service_name> 7080:8080 \n    ```\n\nTo launch JobDeployment service on a web browser at `http://localhost:7080/ui`\n","type":"Mdx","contentDigest":"701c28258614440df71b78c52aa9f920","counter":112,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Job Deployment Service Setup","description":"Quick start guide for getting developers acclimated with the Job Deployment Service of the Accelerated Decision Making with AI Project"},"exports":{},"rawBody":"---\ntitle: Job Deployment Service Setup\ndescription: Quick start guide for getting developers acclimated with the Job Deployment Service of the Accelerated Decision Making with AI Project\n---\n\n<PageDescription>\n\nThis service is intended to enable deployment of a job within a Kubernetes cluster. The service is deployed into the cluster where the jobs will be deployed, so it is assumed that the appropriate credentials are available.\n\nThe service itself has two endpoints, one to check if a particular job is currently running, and the other to deploy a new job given a specified json payload defining the image to be used, and the environment variables which should be injected at runtime.\n\nTo setup the job deployment service, follow the following steps:\n<AnchorLinks>\n  <AnchorLink>Prepare the Container Image </AnchorLink> \n  <AnchorLink>Deploy the Kubernetes Cluster</AnchorLink> \n  \n</AnchorLinks>\n</PageDescription>\n\n## Prepare the Container Image(assuming IBM Container Registry)\n\n1. **Build the Docker image **\n    ```bash\n    docker build . -t us.icr.io</namespace/jobname:tag>\n    ```\n\n2. **Push the Docker image **\n    ```bash\n    docker push us.icr.io</namespace/jobname:tag>\n    ```\n    Alternatively you can use the `push_image.sh` to handle all transactions involved while pushing an image to the IBM Container registry. \n\n    You can run the script by either:\n\n    i. **Providing all the environment variables inline, when running the script with the correct variables. ** e.g. in terminal run \n    ```bash\n    sh ./push_image.sh <TARGET_IBM_CLOUD_URL> <TARGET_IBM_CLOUD_REGION <TARGET_IBM_CLOUD_GROUP> <IBM_CLOUD_APIKEY> <DOCKER_SERVER> <CONTAINER_REGISTRY_NAMESPACE> <IMAGE_NAME> <IMAGE_TAG>\n    ```\n   \n    \n    ii. **Creating a .env file to hold all the required environment variables. **\n    ```env path=.env\n    # Shared variables\n    DOCKER_SERVER=______\n    CONTAINER_REGISTRY_NAMESPACE=______\n    IMAGE_NAME=______\n    IMAGE_TAG=______\n\n    # Push image variables\n    TARGET_IBM_CLOUD_URL=______\n    TARGET_IBM_CLOUD_REGION=______\n    TARGET_IBM_CLOUD_GROUP=______\n    IBM_CLOUD_APIKEY=______\n\n    # Configure yaml files variables\n    NAME=______\n    IMAGE_PULL_SECRET_NAME=______\n    JOB_NAMESPACE=______\n    ```\n\n    Copy the above and save it as .env in the JobDeploymentService directory and provide all the variables. Finally, run the script by simply running `sh ./push_image.sh`\n\nIf the  image already exists in the registry, opt to pull the image instead of pushing the Docker image.\nTo pull the Docker image, execute;\n```bash\ndocker pull [OPTIONS] NAME[:TAG|@DIGEST]\n```\n\n## Kubernetes Cluster Deployment\nStart by generating and configuring the yaml files, by running the script `sh ./config_yaml_files.sh` if you already created the `.env` file above. \n\nOtherwise, either create the `.env` file and supply the variables or supply the required environment variables inline when running the script.\n\n1. **Check for the clusters **\n    ```bash\n    kind get clusters\n    ```\n2. **If there are no clusters, create a new cluster with a name of your choice. ** i.e. admai\n    ```bash \n    kind create cluster --name admai\n    ```\n\n3. **To allow minikube to access and pull the image in the IBM container registry, create an image pull secret, update it in the ** `.env` **file and update it in the ** `name` **tag of the ** `k8s.py` **file **\n    ```sh\n    kubectl create secret docker-registry <YOUR_SECRET_NAME> --docker-server=<YOUR_DOCKER_SERVER e.g. us.icr.io> --docker-username=iamapikey --docker-password=<YOUR_ACCOUNT_APIKEY> --docker-email=<YOUR_DOCKER_EMAIL>\n  \n4. **Navigate to the `JobDeploymentService` directory **\n    ```bash\n    cd JobDeploymentService\n    \n5. **Allow the system user to access cluster resources by running; **\n    ```bash\n    kubectl create -f ocprbac.yaml\n    ```\n6. **Create a deployment by executing; **\n    ```bash\n    kubectl create -f ocpdeploy.yaml\n    ```\n7. **Create a service by executing; **\n    ```bash\n    kubectl create -f mkbservice.yaml\n    ```\n8. **Check whether the pod is started by running; **\n    ```bash\n    kubectl get pods \n    ```\n    If it is not started you can check more details using \n    ```bash\n    kubectl describe pod <pod_name>.\n    ```\n    \n    If the pod is started, run \n    ```bash\n    kubectl port-forward service/<service_name> 7080:8080 \n    ```\n\nTo launch JobDeployment service on a web browser at `http://localhost:7080/ui`\n","fileAbsolutePath":"/home/runner/work/accelerated-decision-making-with-ai/accelerated-decision-making-with-ai/Website/src/pages/contribute/jobdeploymentservice_setup.mdx"}}},"staticQueryHashes":["1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","63531786","63531786","768070550"]}